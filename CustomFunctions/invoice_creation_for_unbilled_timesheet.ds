/*

  This is a sample Custom Function written to be used in the scheduler automation of Zoho Books.
	
  This function will help you to automatically generate invoices for unbilled timesheets at regular intervals.

  Create a connection by the name "zbooks" for the Zoho Books service.

  Please ensure to replace cf_automate_billing with custom field API name. 
  Please ensure to replace cf_billing_frequency with custom field API name. 
  Please ensure to replace cf_billing_cycle with custom field API name. 
  Please ensure to replace cf_billing_date with custom field API name. 
  
  Frquency                - Weekly
  Expires After           - Never expires
  
*/

try 
{
	organizationID = organization.get("organization_id");
	dc = organization.get("data_center_extension");
	apiUrl = organization.get("api_root_endpoint");
	cfPlaceholder = "cf_automate_billing";
	//replace cf_automate_billing with api name of the field
	cfFrequencyPlaceholder = "cf_billing_frequency";
	//replace cf_billing_frequency with api name of the field
	cfBillingCyclePlaceholder = "cf_billing_cycle";
	//replace cf_billing_cycle with api name of the field
	cfBillingStartDatePlaceholder = "cf_billing_date";
	//replace cf_billing_date with api name of the field
	defaultFrequency = 1;
	//kindly put default frequency;
	defaultCycle = "Daily";
	//kindly put default cycle;
	defaultStartDate = "2024-09-19";
	//kindly put default start date;
	url = apiUrl + "/settings/taxes?page=1&per_page=200&organization_id=" + organizationID;
	response = invokeurl
	[
		url :url
		type :GET
		connection:"zbooks"
	];
	taxes = response.get("taxes");
	for each  tax in taxes
	{
		taxName = tax.get("name");
		is_default_tax = tax.get("is_default_tax");
		if(is_default_tax == true)
		{
			defaultTaxID = tax.get("tax_id");
		}
	}
	arraySize = 100;
	arraySize = arraySize - 1;
	pageList = "".rightpad(arraySize).replaceAll(" ",",").toList();
	page = 0;
	recordList = List();
	cDate = zoho.currentdate;
	sList = List();
	companyname = organization.get("name");
	st = "";
	st = st + "<div style=\"background: #4CAF50;\"><div style=\"padding: 2% 3%;max-width: 150px;max-height:50px;\"></div></div><div style=\"padding:3%;text-align:center;background: #4CAF50;\"><div style=\"color:#fff;font-size:20px;font-weight:400;\">Timesheets Status<br>" + cDate + "</div></div>";
	st = st + "<div style=\"max-width:560px;margin:auto;padding: 0 3%;\"> <div style=\"padding: 30px 0; color: #555;line-height: 1.7;\">Hi, <br><br>An overview of the list is available below for your reference<br><br></div</div>";
	st = st + "<div style=\"max-width:560px;margin:auto;padding: 0 3%;\"><table style=\"font-family:\"Trebuchet MS\", Arial, Helvetica, sans-serif; border-collapse: collapse;width: 100%;\"><tr style=\"nth-child(even){background-color: #f2f2f2;}\"><th style=\" border: 1px solid #ddd; padding: 8px; padding-top: 12px; padding-bottom: 12px; text-align: left; background-color: #4CAF50; color: white;border: 1px solid #ddd;padding: 8px;\">SR NO</th><th style=\"border: 1px solid #ddd; padding: 8px;padding-top: 12px;padding-bottom: 12px;text-align: left;background-color: #4CAF50;color: white;border: 1px solid #ddd;padding: 8px;\">PROJECT NAME</th><th style=\"border: 1px solid #ddd; padding: 8px;padding-top: 12px;padding-bottom: 12px;text-align: left;background-color: #4CAF50;color: white;border: 1px solid #ddd;padding: 8px;\">CUSTOMER NAME</th><th style=\"border: 1px solid #ddd; padding: 8px;padding-top: 12px;padding-bottom: 12px;text-align: left;background-color: #4CAF50;color: white;border: 1px solid #ddd;padding: 8px;\">INVOICE NUMBER</th><th style=\"border: 1px solid #ddd; padding: 8px;padding-top: 12px;padding-bottom: 12px;text-align: left;background-color: #4CAF50;color: white;border: 1px solid #ddd;padding: 8px;\">STATUS</th></tr>";
	for each  find in pageList
	{
		page = page + 1;
		url = apiUrl + "/projects/timeentries?page=" + page + "&per_page=200&organization_id=" + organizationID;
		response = invokeurl
		[
			url :url
			type :GET
			connection:"zbooks"
		];
		response = response.get("time_entries");
		if(response.size() > 0)
		{
			recordList.addAll(response);
		}
		else
		{
			break;
		}
	}
	info recordList.size();
	categoryMap = Map();
	projectNameMap = Map();
	projectMapForInvoicing = Map();
	executionReportMap = Map();
	if(recordList.size() > 0)
	{
		for each  record in recordList
		{
			//	info record;
			billed_status = record.get("billed_status");
			project_id = record.get("project_id");
			project_name = record.get("project_name");
			if(billed_status.equalsIgnoreCase("unbilled"))
			{
				if(projectMapForInvoicing.get(project_id).isNull())
				{
					tempProject = zoho.books.getRecordsByID("Projects",organizationID,project_id,"zbooks").get("project");
					projectMapForInvoicing.put(project_id,tempProject);
					url = "https://postman-echo.com/delay/2";
					delayResponseCall = invokeurl
					[
						url :url
						type :GET
					];
					info delayResponseCall;
				}
				else
				{
					tempProject = projectMapForInvoicing.get(project_id);
				}
				//info tempProject;
				projectHashValue = tempProject.get("custom_field_hash");
				considerForInvoicing = projectHashValue.get(cfPlaceholder);
				billingFrequency = projectHashValue.get(cfFrequencyPlaceholder);
				billingCycle = projectHashValue.get(cfBillingCyclePlaceholder);
				billingStartDate = projectHashValue.get(cfBillingStartDatePlaceholder);
				if(considerForInvoicing.isNull())
				{
					considerForInvoicing = false;
				}
				if(considerForInvoicing == true)
				{
					if(billingFrequency.isNull())
					{
						billingFrequency = defaultFrequency;
					}
					if(billingCycle.isNull())
					{
						billingCycle = defaultCycle;
					}
					if(billingStartDate.isNull())
					{
						billingStartDate = defaultStartDate;
					}
					daysDifferenceValue = daysBetween(cDate.toDate(),billingStartDate.toDate());
					if(daysDifferenceValue < 0)
					{
						daysDifferenceValue = daysDifferenceValue * -1;
					}
					if(billingCycle.equalsIgnoreCase("Daily"))
					{
						billingCycleValue = 1;
					}
					else if(billingCycle.equalsIgnoreCase("Weekly"))
					{
						billingCycleValue = 7;
					}
					else if(billingCycle.equalsIgnoreCase("Monthly"))
					{
						billingCycleValue = 30;
						billingStartDateObj = billingStartDate.toDate();
						currentDateObj = cDate.toDate();
						nextBillingDate = billingStartDateObj.addMonth(billingFrequency.toNumber());
					}
					newBillingCycle = billingCycleValue * billingFrequency.toDecimal();
					rem = daysDifferenceValue % newBillingCycle;
					startDaysDiff = daysBetween(cDate.toDate(),billingStartDate.toDate());
					if(rem == 0 && !billingCycle.equalsIgnoreCase("Monthly") && startDaysDiff <= 0 || billingCycle.equalsIgnoreCase("Monthly") && currentDateObj.equals(nextBillingDate) && startDaysDiff <= 0)
					{
						if(!categoryMap.get(project_id).isNull())
						{
							pList = List();
							pList = categoryMap.get(project_id);
							pList.add(record);
							categoryMap.put(project_id,pList);
						}
						else
						{
							pList = List();
							pList.add(record);
							categoryMap.put(project_id,pList);
						}
						executionReportMapProject = Map();
						executionReportMapProject.put(cfBillingStartDatePlaceholder,billingStartDate);
						executionReportMapProject.put(cfPlaceholder,considerForInvoicing);
						executionReportMapProject.put(cfBillingCyclePlaceholder,billingCycle);
						executionReportMapProject.put(cfFrequencyPlaceholder,billingFrequency);
						executionReportMapProject.put("Current Date",cDate);
						executionReportMapProject.put("Status","Today is the day to create an invoice");
						executionReportMap.put(project_name,executionReportMapProject);
					}
					else
					{
						executionReportMapProject = Map();
						executionReportMapProject.put(cfBillingStartDatePlaceholder,billingStartDate);
						executionReportMapProject.put(cfPlaceholder,considerForInvoicing);
						executionReportMapProject.put(cfBillingCyclePlaceholder,billingCycle);
						executionReportMapProject.put(cfFrequencyPlaceholder,billingFrequency);
						executionReportMapProject.put("Current Date",cDate);
						executionReportMapProject.put("Status","Today is not the day to create an invoice");
						executionReportMap.put(project_name,executionReportMapProject);
					}
				}
			}
			projectNameMap.put(project_id,project_name);
		}
		//info categoryMap;
		contactMap = Map();
		if(categoryMap.keys().size() > 0)
		{
			j = 0;
			isTrue = false;
			cDate = cDate.toString("yyyy-MM-dd");
			for each  project in categoryMap.keys()
			{
				projectID = project;
				info projectID;
				url = apiUrl + "/invoices/editpage/fromtimesheet?project_id=" + projectID + "&to_date=" + cDate + "&organization_id=" + organizationID;
				response = invokeurl
				[
					url :url
					type :GET
					connection:"zbooks"
				];
				//info response;
				invoice = response.get("invoice");
				//info invoice;
				if(!invoice.isNull())
				{
					customerContact = response.get("contact");
					taxID = customerContact.get("tax_id");
					//	info invoice;
					lineItems = invoice.get("line_items");
					if(lineItems.size() > 0)
					{
						custID = invoice.get("customer_id");
						cp = invoice.get("contact_persons");
						info "lineItems Count::" + lineItems.size();
						iList = List();
						for each  item in lineItems
						{
							//info item;
							name = item.get("name");
							type = item.get("product_type");
							projID = item.get("project_id");
							timeEntryID = item.get("time_entry_ids");
							qty = item.get("quantity");
							rate = item.get("rate");
							itemMap = Map();
							itemMap.put("name",name);
							if(!type.isNull())
							{
								itemMap.put("product_type",type);
							}
							itemMap.put("project_id",projID);
							if(!taxID.isNull())
							{
								itemMap.put("tax_id",taxID);
							}
							else
							{
								itemMap.put("tax_id",defaultTaxID);
							}
							itemMap.put("time_entry_ids",timeEntryID);
							itemMap.put("quantity",qty);
							itemMap.put("rate",rate);
							iList.add(itemMap);
						}
						if(contactMap.get(custID).isNull())
						{
							url = apiUrl + "/contacts/" + custID + "?organization_id=" + organizationID;
							contactDetails = invokeurl
							[
								url :url
								type :GET
								connection:"zbooks"
							];
							contactDetails = contactDetails.get("contact");
							contactMap.put(custID,contactDetails);
						}
						else
						{
							contactDetails = contactMap.get(custID);
						}
						//info contactDetails;
						contperson = contactDetails.get("contact_persons");
						customerName = contactDetails.get("contact_name");
						//info "contperson: " + contperson;
						contpersonlist = List();
						//info contperson;
						for each  find in contperson
						{
							mp = find.toMap();
							contpid = mp.get("contact_person_id");
							contpersonlist.add(contpid);
						}
						msg = "";
						//info "contpersonlist=" + contpersonlist;
						projectName = projectNameMap.get(projectID);
						if(iList.size() > 0)
						{
							//info invoice;
							isTrue = true;
							j = j + 1;
							json = Map();
							json.put("customer_id",custID);
							json.put("line_items",iList);
							json.put("contact_persons",contpersonlist);
							info "Create JSON:" + json;
							response = zoho.books.createRecord("Invoices",organizationID,json,"zbooks");
							info response;
							responseMsg = response.get("message");
							if(response.get("code") == 0)
							{
								invoice = response.get("invoice");
								invoiceNumber = invoice.get("invoice_number");
								invoiceID = invoice.get("invoice_id");
								invoiceStatus = "Created";
								invoiceLink = "https://books.zoho" + dc + "/app/" + organizationID + "#/invoices/" + invoiceID;
								info "xxxxxxxxxxxxxxxxxxxxxxx";
							}
							else
							{
								invoiceStatus = "Not Created";
								invoiceID = "";
								invoiceNumber = "";
								invoiceLink = "";
							}
							link = "https://books.zoho" + dc + "/app/" + organizationID + "#/timesheet/projects/" + projectID;
							st = st + "<tr><td style=\"border: 1px solid #ddd; padding: 8px;\">" + j + "</td><td style=\"border: 1px solid #ddd; padding: 8px;\"><a href=" + link + ">" + projectName + "</a></td><td style=\"border: 1px solid #ddd;padding: 8px;\">" + customerName + "</td><td style=\"border: 1px solid #ddd; padding: 8px;\"><a href=" + invoiceLink + ">" + invoiceNumber + "</a></td><td style=\"border: 1px solid #ddd;padding: 8px;\">" + invoiceStatus + "</td></tr>";
							temp = executionReportMap.get(projectName);
							temp.put("invoice_status",invoiceStatus);
							temp.put("invoice_number",invoiceNumber);
							temp.put("response_message",responseMsg);
							temp.put("invoice_link",invoiceLink);
							executionReportMap.put(projectName,temp);
							url = "https://postman-echo.com/delay/2";
							delayResponseCall = invokeurl
							[
								url :url
								type :GET
							];
							info delayResponseCall;
						}
					}
					else
					{
						projectName = projectNameMap.get(projectID);
						temp = executionReportMap.get(projectName);
						temp.put("invoice_status","Do not have invoice, no line items");
						executionReportMap.put(projectName,temp);
					}
				}
			}
			st = st + "</table>";
			st = st + "<br><br><br>Regards, <div style=\"color: #8c8c8c; font-weight: 400\"></div><div style=\"color: #b1b1b1\">" + companyname + "</div></div></div><br>";
			if(isTrue == true)
			{
				sendmail
				[
					from :zoho.adminuserid
					to :zoho.adminuserid
					subject :"Execution Report " + cDate
					message :st
				]
			}
			else
			{
				info "There are no invoices to be created today." + cDate;
			}
		}
		else
		{
			info "No timesheets";
		}
	}
	else
	{
		info "No timesheets";
	}
	if(executionReportMap.keys().size() > 0)
	{
		info "xxxxx";
		info executionReportMap;
	}
}
catch (e)
{
	info e;
}
